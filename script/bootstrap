#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] %s\n" "$1"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] %s\n" "$1"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] %s\n" "$1"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] %s\n" "$1"
  echo ''
  exit
}

link_file () {
  local src=$1 dst=$2

  local overwrite backup skip action

  if [ -f "$dst" ] || [ -d "$dst" ] || [ -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc
      currentSrc="$(readlink "$dst")"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 -r action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      info "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_plug () {
  # Vim (~/.vim/autoload)
  curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

  # Neovim (~/.local/share/nvim/site/autoload)
  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
}

install_asdf () {
  git clone https://github.com/asdf-vm/asdf.git ~/.cache/asdf
  cd ~/.cache/asdf
  git checkout "$(git describe --abbrev=0 --tags)"
  cd "$DOTFILES_ROOT"
}

prompt_install() {
  local name=$1 condition=$2

  if (( condition == 0)); then
    read -p "Do you wish to install $name [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      info "installing $name";
      return 0
    else
      fail "$name not installed"
    fi
  else
    info "$name already installed"
  fi
  return 1
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  # if I ever convert this to zsh script, I can use this glob (req. extendedglob)
  # for src in {*,(^.git)/*}.symlink(:a)
  while IFS= read -r -d '' src
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done < <(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*' -print0)

  # Setup /opt dependencies
  git submodule update --init --recursive

  # Install fzf
  "$DOTFILES_ROOT/opt/fzf/install" --bin
  success 'fzf installed'

  # Prompt to install vim-plug
  [[ ! -f "$HOME/.local/share/nvim/site/autoload/plug.vim" ]]
  if prompt_install "vim-plug" $?; then
    install_plug
  fi

  # Prompt to install asdf-vm
  [[ ! -d "$HOME/.cache/asdf" ]]
  if prompt_install "asdf-vm" $?; then
    install_asdf
  fi

  if [[ "${OSTYPE}" == darwin* ]]; then
    read -p "Do you wish to install Brewfile? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      info "installing Brewfile";
      brew bundle --no-lock --file "$DOTFILES_ROOT/config.symlink/homebrew/Brewfile"
    else
      fail "Brewfile not installed"
    fi
  fi
}

install_dotfiles

# If we're on a Mac, let's install and setup homebrew.
# if [ "$(uname -s)" == "Darwin" ]
# then
#   info "installing dependencies"
#   if source bin/dot > /tmp/dotfiles-dot 2>&1
#   then
#     success "dependencies installed"
#   else
#     fail "error installing dependencies"
#   fi
# fi

echo ''
echo '  All installed!'
