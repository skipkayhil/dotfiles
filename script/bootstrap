#!/usr/bin/env bash
#
# bootstrap installs things.

set -euo pipefail

info () {
  printf "\r  [ \033[00;34m..\033[0m ] %s\n" "$1"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] %s\n" "$1"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] %s\n" "$1"
}

pass () {
  printf "\r\033[2K  [ \033[0;33m>>\033[0m ] %s\n" "$1"
}

link_file () {
  local src=$1 dst=$2

  local overwrite backup skip action
  skip=false

  if [ -f "$dst" ] || [ -d "$dst" ] || [ -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      if [ -L "$dst" ] && [ "$(readlink "$dst")" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 -r action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      info "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_vim_plug () {
  # Vim (~/.vim/autoload)
  curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

  # Neovim (~/.local/share/nvim/site/autoload)
  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
}

install_asdf_vm () {
  git clone https://github.com/asdf-vm/asdf.git ~/.cache/asdf
  cd ~/.cache/asdf
  git checkout "$(git describe --abbrev=0 --tags)"
  cd "$DOTFILES_ROOT"
}

prompt_install() {
  local name=$1 installed_path=$2

  if [[ ! -e "$installed_path" ]]; then
    read -p "Do you wish to install $name [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      info "installing $name";
      install_"${name/-/_}"
    else
      pass "$name not installed"
    fi
  else
    info "$name already installed"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  typeset -a files=(.zshenv .config)

  for f in "${files[@]}"; do
    link_file "$DOTFILES_ROOT/$f" "$HOME/$f"
  done

  # Setup /opt dependencies
  git submodule update --init --recursive

  prompt_install "vim-plug" "$HOME/.local/share/nvim/site/autoload/plug.vim"

  prompt_install "asdf-vm" "$HOME/.cache/asdf"

  if [[ "${OSTYPE}" == darwin* ]]; then
    read -p "Do you wish to install Brewfile? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      info "installing Brewfile";
      brew bundle --no-lock --file "$DOTFILES_ROOT/.config/homebrew/Brewfile"
    else
      pass "Brewfile not installed"
    fi
  fi
}

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

echo ''

install_dotfiles

"$DOTFILES_ROOT/bin/dot"

echo ''
echo '  All installed!'
